{
	"info": {
		"_postman_id": "cityquest-api-v1",
		"name": "CityQuest API",
		"description": "Complete API collection for CityQuest MVP - Urban Quest Game\n\n## Authentication\nThe API uses JWT (JSON Web Tokens) for authentication. After successful login or registration, you'll receive a token that should be included in the Authorization header for protected endpoints.\n\n## Base URL\n- Local: http://cityquest.test\n- Production: (to be configured)\n\n## Getting Started\n1. Register a new user\n2. Login to get JWT token\n3. Token will be automatically saved to environment variable\n4. Use protected endpoints with the token\n\n## Version\nAPI Version: 1.0.0\nLast Updated: 2025-10-25",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "cityquest"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('roles');",
									"    pm.expect(jsonData.user).to.have.property('createdAt');",
									"});",
									"",
									"// Validate UUID format",
									"pm.test(\"User ID is valid UUID\", function () {",
									"    var jsonData = pm.response.json();",
									"    var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.user.id).to.match(uuidRegex);",
									"});",
									"",
									"// Validate default role",
									"pm.test(\"User has default ROLE_USER\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.roles).to.include('ROLE_USER');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\",\n    \"username\": \"{{user_username}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account.\n\n**Request Body:**\n- `email` (string, required): Valid email address, max 255 characters\n- `password` (string, required): Minimum 8 characters\n- `username` (string, required): 3-50 characters, alphanumeric + underscore only\n\n**Success Response (201):**\n```json\n{\n  \"user\": {\n    \"id\": \"uuid\",\n    \"email\": \"user@example.com\",\n    \"username\": \"username\",\n    \"roles\": [\"ROLE_USER\"],\n    \"createdAt\": \"2025-10-25T12:00:00+00:00\"\n  }\n}\n```\n\n**Error Responses:**\n- `400` - Validation errors\n- `409` - Email or username already exists"
					},
					"response": [
						{
							"name": "Success - User Registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"securePassword123\",\n    \"username\": \"johndoe\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"user\": {\n        \"id\": \"9d7f8a2b-3c4e-4f5a-8b6c-1d2e3f4a5b6c\",\n        \"email\": \"john.doe@example.com\",\n        \"username\": \"johndoe\",\n        \"roles\": [\"ROLE_USER\"],\n        \"createdAt\": \"2025-10-25T12:00:00+00:00\"\n    }\n}"
						},
						{
							"name": "Error - Duplicate Email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"existing@example.com\",\n    \"password\": \"password123\",\n    \"username\": \"newuser\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"User with email \\\"existing@example.com\\\" already exists\"\n}"
						},
						{
							"name": "Error - Validation Failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"123\",\n    \"username\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"violations\": {\n        \"email\": \"Invalid email format\",\n        \"password\": \"This value is too short. It should have 8 characters or more.\",\n        \"username\": \"This value is too short. It should have 3 characters or more.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test JWT token presence",
									"pm.test(\"Response contains JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Save token to environment",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"jwt_token\", jsonData.token);",
									"    console.log(\"JWT token saved to environment\");",
									"}",
									"",
									"// Test user data",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive JWT token.\n\n**Request Body:**\n- `email` (string, required): User's email address\n- `password` (string, required): User's password\n\n**Success Response (200):**\n```json\n{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\",\n  \"user\": {\n    \"email\": \"user@example.com\",\n    \"username\": \"username\",\n    \"roles\": [\"ROLE_USER\"]\n  }\n}\n```\n\n**Error Responses:**\n- `401` - Invalid credentials\n\n**Note:** The JWT token is automatically saved to the `jwt_token` environment variable after successful login."
					},
					"response": [
						{
							"name": "Success - Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"securePassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTg1MTY4MDAsImV4cCI6MTY5ODUyMDQwMCwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImVtYWlsIjoiam9obi5kb2VAZXhhbXBsZS5jb20ifQ.example_signature\",\n    \"user\": {\n        \"email\": \"john.doe@example.com\",\n        \"username\": \"johndoe\",\n        \"roles\": [\"ROLE_USER\"]\n    }\n}"
						},
						{
							"name": "Error - Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"wrongPassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials.\"\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Test empty response",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});",
									"",
									"// Clear JWT token from environment",
									"pm.environment.unset(\"jwt_token\");",
									"console.log(\"JWT token cleared from environment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout user (client-side token removal).\n\nSince JWT is stateless, the server just acknowledges the logout request. The client is responsible for removing the token from storage.\n\n**Success Response (204):**\n- Empty body\n\n**Note:** The JWT token is automatically cleared from the environment after logout."
					},
					"response": [
						{
							"name": "Success - Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGc..."
									}
								],
								"url": {
									"raw": "{{base_url}}/api/auth/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"logout"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Authentication endpoints for user registration, login, and logout.\n\n## Authentication Flow\n1. Register a new user or use existing credentials\n2. Login to obtain JWT token\n3. Token is automatically saved to environment variable\n4. Use token for authenticated requests\n5. Logout to clear token from environment"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has status OK\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('OK');",
									"});",
									"",
									"// Test response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health-check",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health-check"
							]
						},
						"description": "Check API health status.\n\n**Success Response (200):**\n```json\n{\n  \"status\": \"OK\"\n}\n```\n\nThis endpoint is useful for:\n- Monitoring\n- Load balancer health checks\n- Verifying API availability\n- CI/CD pipeline smoke tests"
					},
					"response": [
						{
							"name": "Success - Health OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health-check",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health-check"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"OK\"\n}"
						}
					]
				}
			],
			"description": "Health check endpoint for monitoring and load balancer checks."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"pm.test(\"Content-Type header is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://cityquest.test",
			"type": "string"
		}
	]
}
